# —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –î–∏–ø—Å–∏–∫–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞

import tkinter as tk
from tkinter import messagebox, simpledialog
from board.game_square import GameSquare
from board.player import Player
from random import randrange
from pathlib import Path
import json

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
descriptions = [
    '–û–ø–∏—Å–∞–Ω–∏–µ 1', '–û–ø–∏—Å–∞–Ω–∏–µ 2', '–û–ø–∏—Å–∞–Ω–∏–µ 3', '–û–ø–∏—Å–∞–Ω–∏–µ 4', '–û–ø–∏—Å–∞–Ω–∏–µ 5',
    '–û–ø–∏—Å–∞–Ω–∏–µ 6', '–û–ø–∏—Å–∞–Ω–∏–µ 7', '–û–ø–∏—Å–∞–Ω–∏–µ 8', '–û–ø–∏—Å–∞–Ω–∏–µ 9', '–û–ø–∏—Å–∞–Ω–∏–µ 10',
    '–û–ø–∏—Å–∞–Ω–∏–µ 11', '–û–ø–∏—Å–∞–Ω–∏–µ 12', '–û–ø–∏—Å–∞–Ω–∏–µ 13', '–û–ø–∏—Å–∞–Ω–∏–µ 14', '–û–ø–∏—Å–∞–Ω–∏–µ 15',
    '–û–ø–∏—Å–∞–Ω–∏–µ 16', '–û–ø–∏—Å–∞–Ω–∏–µ 17', '–û–ø–∏—Å–∞–Ω–∏–µ 18', '–û–ø–∏—Å–∞–Ω–∏–µ 19', '–û–ø–∏—Å–∞–Ω–∏–µ 20',
    '–û–ø–∏—Å–∞–Ω–∏–µ 21', '–û–ø–∏—Å–∞–Ω–∏–µ 22', '–û–ø–∏—Å–∞–Ω–∏–µ 23', '–û–ø–∏—Å–∞–Ω–∏–µ 24', '–û–ø–∏—Å–∞–Ω–∏–µ 25'
]

names = [
    '–ò–º—è 1', '–ò–º—è 2', '–ò–º—è 3', '–ò–º—è 4', '–ò–º—è 5',
    '–ò–º—è 6', '–ò–º—è 7', '–ò–º—è 8', '–ò–º—è 9', '–ò–º—è 10',
    '–ò–º—è 11', '–ò–º—è 12', '–ò–º—è 13', '–ò–º—è 14', '–ò–º—è 15',
    '–ò–º—è 16', '–ò–º—è 17', '–ò–º—è 18', '–ò–º—è 19', '–ò–º—è 20',
    '–ò–º—è 21', '–ò–º—è 22', '–ò–º—è 23', '–ò–º—è 24', '–ò–º—è 25'
]


class GameGUI:
    def __init__(self, root):
        self.root = root
        self.player = None
        self.selected_cell = None
        self.setup_ui()
        self.show_main_menu()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.configure(bg='lightgray')

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        self.main_frame = tk.Frame(self.root, bg='lightgray')
        self.game_frame = tk.Frame(self.root, bg='lightgray')

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–ª–µ—Ç–æ–∫
        self.cell_buttons = [[None for _ in range(5)] for _ in range(5)]
        for row in range(5):
            for col in range(5):
                btn = tk.Button(self.game_frame, text='', width=8, height=4,
                                command=lambda r=row, c=col: self.select_cell(r, c))
                btn.grid(row=row, column=col, padx=2, pady=2)
                self.cell_buttons[row][col] = btn

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.info_frame = tk.Frame(self.root, bg='lightgray')
        self.info_label = tk.Label(self.info_frame, text="", font=("Arial", 12), bg='lightgray')
        self.info_label.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.action_frame = tk.Frame(self.root, bg='lightgray')
        self.create_action_buttons()

    def create_action_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        actions = [
            ("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–µ—Ç–∫–µ", self.show_cell_info),
            ("üîì –û—Ç–∫—Ä—ã—Ç—å –∫–ª–µ—Ç–∫—É", self.open_cell),
            ("‚úÖ –ó–∞—á–∏—Å—Ç–∏—Ç—å –∫–ª–µ—Ç–∫—É", self.clear_cell),
            ("üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É", self.show_full_map),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É", self.save_game),
            ("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É", self.load_game),
            ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.show_main_menu)
        ]

        for text, command in actions:
            btn = tk.Button(self.action_frame, text=text, command=command, width=20)
            btn.pack(pady=2)

    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.hide_all_frames()
        self.main_frame.pack(expand=True)

        tk.Label(self.main_frame, text="üéÆ –ò–ì–†–ê", font=("Arial", 24), bg='lightgray').pack(pady=20)

        tk.Button(self.main_frame, text="üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", command=self.new_game,
                  width=20, height=2, font=("Arial", 14)).pack(pady=10)
        tk.Button(self.main_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É", command=self.load_game_menu,
                  width=20, height=2, font=("Arial", 14)).pack(pady=10)
        tk.Button(self.main_frame, text="üö™ –í—ã—Ö–æ–¥", command=self.root.quit,
                  width=20, height=2, font=("Arial", 14)).pack(pady=10)

    def new_game(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        name = simpledialog.askstring("–ò–º—è –∏–≥—Ä–æ–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", parent=self.root)
        if not name:
            return

        self.player = Player(name, [], 3)
        self.generate_game_field(self.player.field)
        self.player.field[2][2].status = 'cleared'
        self.player.field[2][2].mark = '!!'
        self.open_squares(self.player.field[2][2], self.player)

        self.start_game()

    def start_game(self):
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å"""
        self.hide_all_frames()
        self.game_frame.pack(side=tk.LEFT, padx=20, pady=20)
        self.info_frame.pack(side=tk.TOP, fill=tk.X)
        self.action_frame.pack(side=tk.RIGHT, padx=20, pady=20)

        self.update_display()

    def update_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        if not self.player:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        tokens_text = f"–ò–≥—Ä–æ–∫: {self.player.name} | –¢–æ–∫–µ–Ω—ã: {self.player.tokens}"
        self.info_label.config(text=tokens_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–µ—Ç–∫–∏
        for row in range(5):
            for col in range(5):
                cell = self.player.field[row][col]
                btn = self.cell_buttons[row][col]

                # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if cell.status == 'cleared':
                    btn.config(bg='green', text=cell.mark)
                elif cell.status == 'opened':
                    btn.config(bg='lightblue', text=cell.mark)
                elif cell.status == 'available':
                    btn.config(bg='yellow', text=f"{row},{col}")
                else:
                    btn.config(bg='gray', text=f"{row},{col}")

                # –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
                if self.selected_cell == (row, col):
                    btn.config(relief=tk.SUNKEN)
                else:
                    btn.config(relief=tk.RAISED)

    def select_cell(self, row, col):
        """–í—ã–±—Ä–∞—Ç—å –∫–ª–µ—Ç–∫—É"""
        self.selected_cell = (row, col)
        self.update_display()

    def show_cell_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ—Ç–∫–µ"""
        if not self.selected_cell:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É!")
            return

        row, col = self.selected_cell
        cell = self.player.field[row][col]

        info = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {row},{col}\n"
        info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {cell.name}\n"
        info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {cell.description}\n"
        info += f"–°—Ç–∞—Ç—É—Å: {cell.status}\n"
        info += f"–ú–∞—Ä–∫–µ—Ä: {cell.mark}"

        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–µ—Ç–∫–µ", info)

    def open_cell(self):
        """–û—Ç–∫—Ä—ã—Ç—å –∫–ª–µ—Ç–∫—É"""
        if not self.selected_cell:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É!")
            return

        if self.player.tokens <= 0:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!")
            return

        row, col = self.selected_cell
        cell = self.player.field[row][col]

        if cell.status == 'available':
            cell.change_to_opened()
            self.open_squares(cell, self.player)
            self.player.tokens -= 1
            self.update_display()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–ª–µ—Ç–∫–∞ {row},{col} –æ—Ç–∫—Ä—ã—Ç–∞!")

            if self.check_victory():
                messagebox.showinfo("–ü–û–ë–ï–î–ê!", "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –°–æ–±—Ä–∞–Ω–∞ –ª–∏–Ω–∏—è –∏–∑ 5 –∫–ª–µ—Ç–æ–∫!")
        else:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É –∫–ª–µ—Ç–∫—É!")

    def clear_cell(self):
        """–ó–∞—á–∏—Å—Ç–∏—Ç—å –∫–ª–µ—Ç–∫—É"""
        if not self.selected_cell:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É!")
            return

        row, col = self.selected_cell
        cell = self.player.field[row][col]

        if cell.status == 'opened':
            cell.change_to_cleared()
            self.player.tokens += 3
            self.update_display()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–ª–µ—Ç–∫–∞ –∑–∞—á–∏—â–µ–Ω–∞! +3 —Ç–æ–∫–µ–Ω–∞")

            if self.check_victory():
                messagebox.showinfo("–ü–û–ë–ï–î–ê!", "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –°–æ–±—Ä–∞–Ω–∞ –ª–∏–Ω–∏—è –∏–∑ 5 –∫–ª–µ—Ç–æ–∫!")
        else:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è –∑–∞—á–∏—Å—Ç–∏—Ç—å —ç—Ç—É –∫–ª–µ—Ç–∫—É!")

    def show_full_map(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç—É"""
        map_text = "–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∞:\n\n"
        for row in range(5):
            for col in range(5):
                cell = self.player.field[row][col]
                map_text += f"[{row},{col}]: {cell.mark} ({cell.status})\n"
            map_text += "\n"

        messagebox.showinfo("–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∞", map_text)

    def save_game(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"""
        if not self.player:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return

        filename = f'savegame_{self.player.name.lower()}.json'
        data = self.player.save()

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")

    def load_game_menu(self):
        """–ú–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã"""
        path = Path()
        files = list(path.glob("savegame_*.json"))

        if not files:
            messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞", "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä!")
            return

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        dialog.geometry("300x400")

        tk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:", font=("Arial", 12)).pack(pady=10)

        listbox = tk.Listbox(dialog, width=40, height=15)
        for file in files:
            listbox.insert(tk.END, file.name[9:-5])  # –£–±–∏—Ä–∞–µ–º 'savegame_' –∏ '.json'
        listbox.pack(pady=10)

        def load_selected():
            selection = listbox.curselection()
            if selection:
                filename = files[selection[0]]
                self.load_game(filename)
                dialog.destroy()

        tk.Button(dialog, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=load_selected).pack(pady=5)
        tk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(pady=5)

    def load_game(self, filename):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)

            self.player = Player(data['name'], [], data['tokens'])

            for row_data in data['field']:
                row_temp = []
                for square_data in row_data:
                    square = GameSquare(
                        square_data['column'],
                        square_data['row'],
                        square_data['name'],
                        square_data['description']
                    )
                    square.status = square_data['status']
                    square.mark = square_data['mark']
                    row_temp.append(square)
                self.player.field.append(row_temp)

            self.start_game()
            messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞", f"–ò–≥—Ä–∞ {data['name']} –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def hide_all_frames(self):
        """–°–∫—Ä—ã—Ç—å –≤—Å–µ —Ñ—Ä–µ–π–º—ã"""
        for frame in [self.main_frame, self.game_frame, self.info_frame, self.action_frame]:
            frame.pack_forget()

    # –í–∞—à–∏ –∏–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    def generate_game_field(self, game_field):
        for row in range(5):
            rows = []
            for column in range(5):
                index = randrange(len(names))
                name, description = names.pop(index), descriptions.pop(index)
                rows.append(GameSquare(column, row, name, description))
            game_field.append(rows)
        return game_field

    def open_squares(self, square, player):
        coordinates = square.coordinates()
        for i in range(max(0, int(coordinates[0]) - 1), min(5, int(coordinates[0]) + 2)):
            for j in range(max(0, int(coordinates[1]) - 1), min(5, int(coordinates[1]) + 2)):
                player.field[i][j].change_to_available()

    def check_victory(self):
        if not self.player:
            return False

        for row in range(5):
            if all(self.player.field[row][col].status == 'cleared' for col in range(5)):
                return True

        for col in range(5):
            if all(self.player.field[row][col].status == 'cleared' for row in range(5)):
                return True

        if all(self.player.field[i][i].status == 'cleared' for i in range(5)):
            return True

        if all(self.player.field[i][4 - i].status == 'cleared' for i in range(5)):
            return True

        return False

"""–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã"""
root = tk.Tk()
root.title("–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ")
root.geometry("800x600")

app = GameGUI(root)
root.mainloop()
